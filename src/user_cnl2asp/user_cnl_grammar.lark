%import common.WS
%import common.LETTER
%import common.INT
%import common.UCASE_LETTER
%import common.LCASE_LETTER
%import common._EXP
%import common.CPP_COMMENT
%import common.C_COMMENT

%ignore WS
%ignore CPP_COMMENT
%ignore C_COMMENT

start: (import_rule | rule)+

import_rule: "import" rule_name
!rule_name: "explicit_definition_proposition" | "implicit_definition_proposition" | "standard_proposition" | "entity"

rule: context proposition

context: /\[/ RULE_TYPE /\]/
RULE_TYPE: "constraint" | "assignment" | "choice" | "preference" | "aggregate" | "operation"
        | "aggregate.operator.sum"
        | "aggregate.operator.count"
        | "aggregate.operator.min"
        | "aggregate.operator.max"
        | "operation.operator.sum"
        | "operation.operator.difference"
        | "operation.operator.multiplication"
        | "operation.operator.division"
        | "operation.operator.equality"
        | "operation.operator.inequality"
        | "operation.operator.greater_than"
        | "operation.operator.less_than"
        | "operation.operator.greater_than_or_equal_to"
        | "operation.operator.less_than_or_equal_to"
        | "operation.operator.conjunction"
        | "operation.operator.disjunction"
        | "operation.operator.left_implication"
        | "operation.operator.right_implication"
        | "operation.operator.equivalence"
        | "operation.operator.negation"
        | "operation.operator.previous"
        | "operation.operator.weak_previous"
        | "operation.operator.trigger"
        | "operation.operator.always_before"
        | "operation.operator.since"
        | "operation.operator.eventually_before"
        | "operation.operator.precede"
        | "operation.operator.weak_precede"
        | "operation.operator.next"
        | "operation.operator.weak_next"
        | "operation.operator.release"
        | "operation.operator.always_after"
        | "operation.operator.until"
        | "operation.operator.eventually_after"
        | "operation.operator.follow"
        | "operation.operator.weak_follow"
OPEN_PARENTHESIS: "("
CLOSED_PARENTHESIS: ")"
KLEENE_CLOSURE_OPERATOR: "*"
POSITIVE_CLOSURE_OPERATOR: "+"
proposition: structural_proposition
            | support_proposition -> dummy

structural_proposition: token
           | structural_proposition structural_proposition
           | OPEN_PARENTHESIS structural_proposition CLOSED_PARENTHESIS (KLEENE_CLOSURE_OPERATOR | POSITIVE_CLOSURE_OPERATOR)
support_proposition: STRING ":" structural_proposition
token: /\"/ STRING+ /\"/ -> structural_token
     | STRING /\{/ command_list /\}/
command_list: COMMAND ("," COMMAND)*
COMMAND: "head" | "body" | "condition"
        | "aggregate.operator" | "aggregate.body" | "aggregate.discriminant"
        | "operation.operator" | "operation.operand"

STRING: /[A-Za-z0-9]+/i
END_OF_PROPOSITION: /\./