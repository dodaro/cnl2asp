// imports from common library
%import common.WS
%import common.LETTER
%import common.INT
%import common.UCASE_LETTER
%import common.NUMBER
%import common._EXP
%import common.CPP_COMMENT
%import common.C_COMMENT

// Disregard spaces in text
%ignore WS
%ignore CNL_END_OF_LINE
%ignore CPP_COMMENT
%ignore C_COMMENT

// Which type of clause do we expect?
start: (( negative_strong_constraint_clause
        | positive_strong_constraint
        | weak_constraint
        | definition_clause
        | quantified_choice_clause)CNL_END_OF_LINE)+

//Rules
negative_strong_constraint_clause: CNL_PROHIBITION (simple_clause ("and also" simple_clause)* (where_clause)? | aggregate_clause comparison_clause (where_clause)? | quantified_constraint (where_clause)?)
positive_strong_constraint: CNL_REQUIREMENT (aggregate_clause comparison_clause (where_clause)? | when_then_clause (where_clause)? | quantified_constraint (where_clause)?)
when_then_clause: "when" when_part "then" then_part
when_part: (simple_clause comparison_clause? | simple_clause ("and also" simple_clause)*)
then_part: (simple_clause comparison_clause? | simple_clause ("and also" simple_clause)*)
quantified_constraint: quantifier simple_clause

weak_constraint: CNL_PREFERENCE ","? weak_priority_clause ","? "that" (condition_operation | aggregate_clause) weak_optimization_operator (where_clause)?
weak_priority_clause: "with" CNL_PRIORITY_LEVEL "priority"
weak_optimization_operator: "is" CNL_OPTIMIZATION_OPERATOR
ranging_clause: "ranging between" constant "and" constant

definition_clause: (compounded_clause | constant_definition_clause | ordering_definition_clause | enumerative_definition_clause)
definition_object: constant
compounded_clause: ("A " | "An ") subject_clause (compounded_clause_range compounded_clause_granularity? | compounded_clause_match compounded_clause_granularity? compounded_clause_match_tail?)
compounded_clause_granularity: "and is made of" object_clause ("that are made of" object_clause)*
compounded_clause_match_tail: "and has" object_clause ("that are equal to respectively" | "that is equal to respectively") compounded_list ("and also" object_clause ("that are equal to respectively" | "that is equal to respectively") compounded_list)*
compounded_clause_match: "is one of" compounded_list
compounded_list: definition_object ("," definition_object)*
compounded_clause_range: "goes from" range_lhs "to" range_rhs
constant_definition_clause.1: subject_name "is equal to" (constant | question_mark)
ordering_definition_clause: subject_clause "comes before" subject_clause ("which comes before" subject_clause)*
enumerative_definition_clause: subject_clause CNL_COPULA? (verb_name | verb_name_with_preposition) (subject_clause ("and" subject_clause)*)? ("when" when_part)? (where_clause)?

quantified_choice_clause.1: quantifier subject_clause "can" CNL_COPULA? (verb_name | verb_name_with_preposition) (quantified_exact_quantity_clause | quantified_range_clause)? quantified_object_clause? foreach_clause?
quantifier.1: CNL_QUANTIFIER
quantified_exact_quantity_clause: exact_quantity_operator quantified_exact_quantity
quantified_exact_quantity: CNL_NUMBER
quantified_range_clause: range_operator range_lhs "and" range_rhs
exact_quantity_operator: CNL_EXACT_QUANTITY_OPERATOR
quantified_object_clause: (object_clause | simple_clause) ("and" (object_clause | simple_clause))*

property_clause: "For" subject_name "holds" property_definition
property_definition: ordering_definition
ordering_definition: CNL_ORDERING_DEFINITION compounded_list

ordering_operator: CNL_ORDERING_OPERATOR

simple_clause: subject_clause CNL_COPULA? verb_clause
aggregate_clause: "the" aggregate_operator "of" (aggregate_active_clause | aggregate_passive_clause) (ranging_clause)?
aggregate_operator: CNL_AGGREGATE
aggregate_active_clause: subject_clause "that" CNL_COPULA? aggregate_verb_clause aggregate_object_clause? aggregate_for_clause?
aggregate_passive_clause: aggregate_object_clause (aggregate_for_clause)? "where" subject_clause CNL_COPULA? aggregate_verb_clause
aggregate_object_clause: verb_object_clause | composition_clause | tuple_clause
aggregate_verb_clause: verb_negation? (verb_name | verb_name_with_preposition)
aggregate_for_clause: "for" aggregate_determinant_clause ("and" aggregate_determinant_clause)*
aggregate_determinant_clause: aggregate_determinant object_clause
aggregate_determinant: CNL_DETERMINANT

subject_clause:  ("a " | "that ") subject_name
                | subject_ordering_clause subject_name
                | subject_name (variable | constant) ("and" subject_name (variable | constant))*
                | subject_name
subject_name: CNL_WORD
subject_ordering_clause.1: shift_operator consecution_clause?
consecution_clause: number consecution_operator

verb_clause: verb_negation? verb_name_with_preposition (verb_object_clause | composition_clause | tuple_clause | same_clause)? | verb_negation? verb_name
verb_negation: CNL_VERB_NEGATION | CNL_NEGATION
verb_name: CNL_WORD
verb_name_with_preposition.1: CNL_WORD CNL_PREPOSITION
verb_object_clause: ("a "? object_name | object_name (variable | constant)) object_range? (verb_object_ordering_clause | verb_object_consecution_clause)?
verb_object_ordering_clause: ordering_operator variable
verb_object_consecution_clause: "for" number consecution_operator object_name
object_name: CNL_WORD
object_range: range_operator (object_binary_range | object_windowed_range)
object_windowed_range: "each" constant subject_name
object_binary_range: constant "and" constant
range_operator: CNL_RANGE_OPERATOR

where_clause: "," " "* "where" (condition_clause | condition_match_group) ("and" condition_clause)*
condition_match_group: condition_match_clause ("and" condition_match_clause)*
condition_match_clause: variable CNL_COPULA "one of" "respectively"* compounded_list
condition_clause: variable CNL_COPULA (condition_comparison_clause | condition_ordering_clause | condition_bound_clause)
condition_ordering_clause: number subject_name ordering_operator (variable | constant)
condition_comparison_clause: condition_negation? condition_operator condition_expression
condition_bound_clause: "between" object_name "and" object_name
condition_operator: CNL_OPERATOR
condition_negation: CNL_NEGATION
condition_expression: (condition_expression_value | condition_operation)
condition_expression_value: (constant | variable | aggregate_clause)
condition_operation: condition_expression_operator condition_expression_value "and" condition_expression_value
condition_expression_operator: CNL_OPERATION absolute_value_operator? "between"

comparison_clause: "is" condition_operator comparison_value
comparison_value: constant | variable

variable: CNL_VARIABLE
constant: CNL_CONSTANT | CNL_NUMBER
object_clause: "a "? object_name variable?
number: CNL_NUMBER
foreach_clause.1: "for each" object_clause ("and" object_clause)*
range_lhs: CNL_NUMBER
range_rhs: CNL_NUMBER
question_mark: CNL_QUESTION_MARK
tuple_operator: CNL_TUPLE_OPERATOR
composition_operator: CNL_COMPOSITION_OPERATOR
shift_operator: CNL_SHIFT_OPERATOR
consecution_operator: CNL_CONSECUTION_OPERATOR
tuple_clause: verb_object_clause tuple_operator verb_object_clause ("and" tuple_operator verb_object_clause)*
composition_clause: verb_object_clause composition_operator verb_object_clause
same_clause: "the same" subject_clause
absolute_value_operator: CNL_ABSOLUTE_VALUE

//Terminals
CNL_PROHIBITION: "it is prohibited that"i
CNL_REQUIREMENT: "it is required that"i
CNL_PREFERENCE: "it is preferred"i

CNL_PREPOSITION: "to" | "for" | "from" | "on" | "at" | "about" | "with" | "in"

CNL_NEGATION: "not"
CNL_VERB_NEGATION:  "do not"
                  | "does not"
                  | "don't"
                  | "doesn't"
                  | "are not"
                  | "aren't"
CNL_COPULA:    "be "
             | "be a "
             | "be an "
             | "is "
             | "is a "
             | "is an "
             | "are "
             | "are a "
             | "are an "
             | "have "
             | "have a "
             | "have an "
             | "has "
             | "has a "
             | "has an "
CNL_RANGE_OPERATOR: "between"
CNL_EXACT_QUANTITY_OPERATOR: "exactly"
CNL_QUANTIFIER: "every"i | "any"i
CNL_PRIORITY_LEVEL: "low" | "medium" | "high"
CNL_OPTIMIZATION_OPERATOR: "minimized" | "maximized"

CNL_OPERATOR: "the same as"
            | "different from"
            | "equal to"
            | "more than"
            | "greater than"
            | "less than"
            | "greater or equal than"
            | "less or equal than"
            | "at least"
            | "at most"
CNL_ORDERING_OPERATOR: "before" | "after"
CNL_AGGREGATE: "number" | "total" | "highest" | "lowest" | "biggest" | "smallest"
CNL_ORDERING_DEFINITION: "the ordering"
CNL_TUPLE_OPERATOR: "with" | "taken with"
CNL_COMPOSITION_OPERATOR: "in"
CNL_SHIFT_OPERATOR: "the next" | "the previous"
CNL_CONSECUTION_OPERATOR: "consecutive"
CNL_DETERMINANT: "each" | "any"
CNL_ABSOLUTE_VALUE: "in absolute value"

CNL_WORD: (LETTER | INT | "_")+
CNL_CONSTANT: (LETTER | INT | "_" | "-")+
CNL_VARIABLE: UCASE_LETTER (UCASE_LETTER | INT | "_")*
CNL_EXPRESSION: (CNL_VARIABLE | CNL_NUMBER | "+" | "-"| "*" | "/")+
CNL_OPERATION:   "the sum"
               | "the difference"
               | "the product"
               | "the division"

CNL_END_OF_LINE: "."
CNL_NUMBER: INT | CNL_FLOAT
CNL_FLOAT: INT _EXP | CNL_DECIMAL _EXP?
CNL_DECIMAL: INT "." INT | "." INT

CNL_QUESTION_MARK: /\?/