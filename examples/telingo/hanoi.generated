#program always.
disk(0).
disk(1).
disk(2).
disk(3).
peg(1).
peg(2).
peg(3).
goal(3,3).
goal(2,3).
goal(1,3).

#program initial.
on(X,1): peg(1) :- X > 0, disk(X).

#program dynamic.
{moved_to(D,PG_D): peg(PG_D)} :- disk(D).
:- #count{D: moved_to(D,MVD_T_D), peg(MVD_T_D)} != 1.
on(D,P) :- disk(D), moved_to(D,P), peg(P).
moved(D) :- disk(D), moved_to(D,P), peg(P).
on(D,P) :- 'on(D,P), peg(P), disk(D), not moved(D).
blocked_in(X,P) :- disk(X), disk(D), 'on(D,P), peg(P), X = D-1.
blocked_in(X,P) :- disk(X), disk(D), blocked_in(D,P), peg(P), X = D-1.
:- disk(D), moved_to(D,P), disk(X), blocked_in(X,P), peg(P), X = D-1.
:- moved_to(D,P1), peg(P1), 'on(D,P2), disk(D), blocked_in(D,P2), peg(P2).

#program final.
:- disk(D), not on(D,P), peg(P), goal(D,P).